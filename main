#include <NewPing.h>
#include <vector>

#define TRIGGER_PIN_1  2
#define ECHO_PIN_1     3
#define TRIGGER_PIN_2 4
#define ECHO_PIN_2 5
#define MAX_DISTANCE 200

vector<int> travelled; // 0 = front, 1 = left, 2 = right, 3 = back
bool mazeSolved = false;

NewPing ultrasonic1(TRIGGER_PIN_1, ECHO_PIN_1, MAX_DISTANCE);
NewPing ultrasonic2(TRIGGER_PIN_2, ECHO_PIN_2, MAX_DISTANCE);

void moveForward(int time, int speed){
  travelled.push_back(0);
}

void turnLeft(int time,int speed){
  travelled.push_back(1);
}
void turnRight(int time, int speed){
  travelled.push_back(2);
}

void maze(bool leftMode){
  
  while(!mazeSolved){
    if(leftMode){
      if(left_distance<10){ // First rule: if there is road to left
        turnLeft(2000,255);
        moveForward(1000,255);
        if(!shortestpath){
          shortestPathCheck(1);
        }
      } else if (front_distance<10){ // Second rule: if there is road forward
        moveForward(100,255);
        travelled.push_back(0);
        if(!shortestpath){
          shortestPathCheck(0);  
        }
        } else { //Third rule: if there is no road for left and forward
          turnRight(2000,255);
          if(travelled.back()==2){
            shortestpath = false;
            travelled.pop_back();
            continue;
          }
          if(!shortestpath){
            shortestPathCheck(2);  
          }
        }  
    }
  }
  vector<string>::iterator it; // print the shortest route at the end
  for(it = travelled.begin();it!=travelled.end();it++){
    Serial.print(*it);
  }
}

void setup() {
  Serial.begin(115200);
}
 
void loop() {
  delay(1000);
  Serial.print("Ping Sensor1: ");
  Serial.print(ultrasonic1.ping_cm());
  Serial.println("cm");
  Serial.print("Ping Sensor2: ");
  Serial.print(ultrasonic2.ping_cm());
  Serial.println("cm");
}
